/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.security;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileSystemView;
/**
 *
 * @author ASUS
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        buttonGroup1.add(option1);
        buttonGroup1.add(option2);
        buttonGroup1.add(option3);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        CoverPanel = new javax.swing.JPanel();
        SecretPanel = new javax.swing.JPanel();
        ResultPanel = new javax.swing.JPanel();
        CLoad = new javax.swing.JButton();
        CSave = new javax.swing.JButton();
        SLoad = new javax.swing.JButton();
        RLoad = new javax.swing.JButton();
        RSave = new javax.swing.JButton();
        Hide = new javax.swing.JButton();
        Restore = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        option1 = new javax.swing.JRadioButton();
        option2 = new javax.swing.JRadioButton();
        option3 = new javax.swing.JRadioButton();
        CClear = new javax.swing.JButton();
        RClear = new javax.swing.JButton();
        SClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout CoverPanelLayout = new javax.swing.GroupLayout(CoverPanel);
        CoverPanel.setLayout(CoverPanelLayout);
        CoverPanelLayout.setHorizontalGroup(
            CoverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        CoverPanelLayout.setVerticalGroup(
            CoverPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout SecretPanelLayout = new javax.swing.GroupLayout(SecretPanel);
        SecretPanel.setLayout(SecretPanelLayout);
        SecretPanelLayout.setHorizontalGroup(
            SecretPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        SecretPanelLayout.setVerticalGroup(
            SecretPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout ResultPanelLayout = new javax.swing.GroupLayout(ResultPanel);
        ResultPanel.setLayout(ResultPanelLayout);
        ResultPanelLayout.setHorizontalGroup(
            ResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        ResultPanelLayout.setVerticalGroup(
            ResultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        CLoad.setText("Load");
        CLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLoadActionPerformed(evt);
            }
        });

        CSave.setText("Save");
        CSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CSaveActionPerformed(evt);
            }
        });

        SLoad.setText("Load");
        SLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SLoadActionPerformed(evt);
            }
        });

        RLoad.setText("Load");
        RLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RLoadActionPerformed(evt);
            }
        });

        RSave.setText("Save");
        RSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RSaveActionPerformed(evt);
            }
        });

        Hide.setText("Hide");
        Hide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HideActionPerformed(evt);
            }
        });

        Restore.setText("Restore");
        Restore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestoreActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("     Cover");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("         Secret");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setText("     Result");

        option1.setText("1 bit");

        option2.setText("2 bits");

        option3.setText("3 bits");

        CClear.setText("Clear");

        RClear.setText("Clear");

        SClear.setText("Clear");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ResultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CoverPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RSave, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                            .addComponent(Restore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(option1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(option2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(option3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RClear, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SecretPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(72, 72, 72)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(SLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Hide, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(SClear, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CoverPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SecretPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(Hide, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(SClear, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(CSave, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(CClear, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(option1)
                                .addGap(9, 9, 9)
                                .addComponent(option2)
                                .addGap(8, 8, 8)
                                .addComponent(option3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ResultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(RLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(RSave, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(Restore, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(RClear, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLoadActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
		jfc.setDialogTitle("Choose a directory to save your file: ");
		jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

		int returnValue = jfc.showSaveDialog(null);
		if (returnValue == JFileChooser.APPROVE_OPTION) {
			if (jfc.getSelectedFile().isFile()) {
                            try {
                                BufferedImage img = ImageIO.read(new File(jfc.getSelectedFile().getPath()));
                                pix1= getMatrixOfImage(img);
                                
                                //JLabel picLabel = new JLabel(new ImageIcon(img));
                                Graphics g = CoverPanel.getGraphics() ;
                               CoverPanel.paintComponents(g);
                                g.drawImage(img,0 , 0, CoverPanel);
                                CoverPanel.paintComponents(g);
                               
                               
                                CoverPanel.setEnabled(true);
                                CoverPanel.setVisible(true);
                                //CoverPanel.setBackground(Color.red);
                                
                                System.out.println(jfc.getSelectedFile().getPath());
                                System.out.println(pix1[3][3].getRed());
                                System.out.println(pix1[3][3].getGreen());
                                System.out.print(pix1[3][3].getBlue());
                                
                                
                            } catch (IOException ex) {
                                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            

			}
		}
    }//GEN-LAST:event_CLoadActionPerformed

    private void RLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RLoadActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
		jfc.setDialogTitle("Choose a directory to save your file: ");
		jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

		int returnValue = jfc.showSaveDialog(null);
		if (returnValue == JFileChooser.APPROVE_OPTION) {
			if (jfc.getSelectedFile().isFile()) {
                            try {
                                BufferedImage img = ImageIO.read(new File(jfc.getSelectedFile().getPath()));
                                pix3= getMatrixOfImage(img);
                                //JLabel picLabel = new JLabel(new ImageIcon(img));
                                Graphics g = ResultPanel.getGraphics() ;
                               ResultPanel.paintComponents(g);
                                g.drawImage(img,0 , 0, ResultPanel);
                                ResultPanel.paintComponents(g);
                               
                               
                                ResultPanel.setEnabled(true);
                                ResultPanel.setVisible(true);
                                //CoverPanel.setBackground(Color.red);
                                
                                System.out.print(jfc.getSelectedFile().getPath());
                                
                                
                            } catch (IOException ex) {
                                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            

			}
		}
    }//GEN-LAST:event_RLoadActionPerformed

    private void SLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SLoadActionPerformed
        // TODO add your handling code here:
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
		jfc.setDialogTitle("Choose a directory to save your file: ");
		jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

		int returnValue = jfc.showSaveDialog(null);
		if (returnValue == JFileChooser.APPROVE_OPTION) {
			if (jfc.getSelectedFile().isFile()) {
                            try {
                                BufferedImage img = ImageIO.read(new File(jfc.getSelectedFile().getPath()));
                                pix2= getMatrixOfImage(img);
                                //JLabel picLabel = new JLabel(new ImageIcon(img));
                                Graphics g = SecretPanel.getGraphics() ;
                                SecretPanel.paintComponents(g);
                                g.drawImage(img,0 , 0, SecretPanel);
                                SecretPanel.paintComponents(g);
                               
                               
                                SecretPanel.setEnabled(true);
                                SecretPanel.setVisible(true);
                                //CoverPanel.setBackground(Color.red);
                                
                                
                                
                                
                            } catch (IOException ex) {
                                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            

			}
		}
    }//GEN-LAST:event_SLoadActionPerformed

    private void HideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HideActionPerformed
        // TODO add your handling code here:
        int k=0; 
        byte w;
        boolean y = false;
        byte x=0;
        secret = getByteArray();
        
        if(option1.isSelected()){
            w = 1;
            for (int i=0;i<600;i++){
                for(int j=0; j<400;j++ ){
                    if(k>=60000) {System.out.println(j+i*400); y=true;break;}
                    //System.out.println("Shiiiiit");
                   Integer red = pix1[i][j].getRed();
                   Integer green = pix1[i][j].getGreen();
                   Integer blue = pix1[i][j].getBlue();
                   byte bblue = blue.byteValue();
                    byte bred = red.byteValue();
                    byte bgreen = green.byteValue();
                   bred = (byte)(bred &0xFE);
                   w = (byte) (secret[k] & w);
                   Integer.rotateRight(w, x);
                   bred = (byte)(bred | w); 
                   w=1;
                   Integer.rotateLeft(w, x+1);
                   x = (byte)((x+1)%8);
                   if(w==1) k++;
                   bgreen = (byte)(bgreen &0xFE);
                   w = (byte) (secret[k] & w);
                   Integer.rotateRight(w, x);
                   bgreen = (byte)(bgreen | w); 
                   w=1;
                   Integer.rotateLeft(w,x+ 1);
                   x = (byte)((x+1)%8);
                   if(w==1) k++;
                   bblue = (byte)(bblue &0xFE);
                   w = (byte) (secret[k] & w);
                   Integer.rotateRight(w, x);
                   bblue = (byte)(bblue | w); 
                   w=1;
                   Integer.rotateLeft(w, 1+x);
                   x = (byte)((x+1)%8);
                   if(w==1) k++;
                   red = (int)bred&0x00FF;;
                   green = (int)bgreen&0x00FF;;
                   blue = (int)bblue &0x00FF;
                   pix1[i][j] = new Color(red,green,blue);
                   
                   
                   
                           
                
                }
                if(y) {
                    y=false;
                    break;
                }
            }
            
        }
        
        else if(option2.isSelected()){
            w = 3;
            for (int i=0;i<600;i++){
                for(int j=0; j<400;j++ ){
                    if(k>=60000) { y=true;break;}
                    //System.out.println("Shiiiiit");
                   Integer red = pix1[i][j].getRed();
                   Integer green = pix1[i][j].getGreen();
                   Integer blue = pix1[i][j].getBlue();
                   byte bblue = blue.byteValue();
                    byte bred = red.byteValue();
                    byte bgreen = green.byteValue();
                   bred = (byte)(bred &0xFC);
                   w = (byte) (secret[k] & w);
                   //System.out.println(red);
                   Integer.rotateRight(w, x*2);
                   
                   bred = (byte)(bred | w); 
                   w=3;
                   //System.out.println(red);
                   Integer.rotateLeft(w, (x*2)+2);
                  // System.out.println(x);
                   x = (byte)((x+1)%4);
                   if(w==3) k++;
                   bgreen = (byte)(bgreen &0xFC);
                   w = (byte) (secret[k] & w);
                   Integer.rotateRight(w, x*2);
                   bgreen = (byte)(bgreen | w); 
                   w=3;
                   Integer.rotateLeft(w,(x*2)+2);
                   x = (byte)((x+1)%4);
                   if(w==3) k++;
                   bblue = (byte)(bblue &0xFC);
                   w = (byte) (secret[k] & w);
                   Integer.rotateRight(w, x*2);
                   bblue = (byte)(bblue | w); 
                   w=3;
                   Integer.rotateLeft(w, (x*2)+2);
                   x = (byte)((x+1)%4);
                   if(w==3) k++;
                   red = (int)bred&0x00FF;;
                   green = (int)bgreen&0x00FF;;
                   blue = (int)bblue &0x00FF;
                   pix1[i][j] = new Color(red,green,blue);
                   
                   
                    if(y) {
                    y=false;
                    break;
                    }
                }
            }
        }
        else if(option3.isSelected()){
            w = 7;
            for (int i=0;i<600;i++){
                for(int j=0; j<400;j++ ){
                   if(k>=60000) { y=true;break;}
                    //System.out.println("Shiiiiit");
                   Integer red = pix1[i][j].getRed();
                   Integer green = pix1[i][j].getGreen();
                   Integer blue = pix1[i][j].getBlue();
                   byte bblue = blue.byteValue();
                   byte bred = red.byteValue();
                   byte bgreen = green.byteValue();
                   bred = (byte)(bred &0xF8);
                   w = (byte) (secret[k] & w);
                   //System.out.println(red);
                   Integer.rotateRight(w, x*3);
                   
                   bred = (byte)(bred | w); 
                   w=7;
                   //System.out.println(red);
                   Integer.rotateLeft(w, (x*3)+3);
                  // System.out.println(x);
                   x = (byte)((x+1)%3);
                   if(w==7) k++;
                   bgreen = (byte)(bgreen &0xF8);
                   w = (byte) (secret[k] & w);
                   Integer.rotateRight(w, x*3);
                   bgreen = (byte)(bgreen | w); 
                   w=7;
                   Integer.rotateLeft(w,(x*3)+3);
                   x = (byte)((x+1)%3);
                   if(w==7) k++;
                   bblue = (byte)(bblue &0xF8);
                   w = (byte) (secret[k] & w);
                   Integer.rotateRight(w, x*3);
                   bblue = (byte)(bblue | w); 
                   w=7;
                   Integer.rotateLeft(w, (x*3)+3);
                   x = (byte)((x+1)%3);
                   if(w==7) k++;
                   red = (int)bred&0x00FF;;
                   green = (int)bgreen&0x00FF;;
                   blue = (int)bblue &0x00FF;
                   pix1[i][j] = new Color(red,green,blue);
                   
                   
                    if(y) {
                    y=false;
                    break;
                    }
                }
            }
            
        }
        
        BufferedImage img; 
        img = getImage(pix1);
        Rimg = img;
        Graphics g = ResultPanel.getGraphics() ;
        ResultPanel.paintComponents(g);
        g.drawImage(img,0 , 0, ResultPanel);
        ResultPanel.paintComponents(g);
        
        
        
    }//GEN-LAST:event_HideActionPerformed

    private void RestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestoreActionPerformed
        int k=0; 
        byte w=1;
        byte S=0;
        boolean y = false;
        byte x=0;
        byte [] NewSecret = new byte [60000];
        
        if(option1.isSelected()){
            for (int i=0; i<600;i++){
                for(int j=0;j<400;j++){
                   // System.out.println("shiiiit");
                   Integer red = pix3[i][j].getRed();
                  
                   Integer green = pix3[i][j].getGreen();
                   
                   Integer blue = pix3[i][j].getBlue();
                    byte bblue = blue.byteValue();
                    byte bred = red.byteValue();
                    byte bgreen = green.byteValue();
                  // System.out.println("bred = "+bred);
                  // System.out.println("wold= "+w);
                   w = (byte)(bred & w);
                  // System.out.println("w = "+w);
                   S = (byte) (S|w);
                   w=1;
                   S = (byte) Integer.rotateLeft(S, x);
                   x = (byte) ((x+1)%8);
                   if (x==1) {
                       NewSecret[k] = S;
                       System.out.println(S);
                       S=0;
                       k++;
                      // System.out.println(k);
                       if(k>=60000){y=true;break;}
                       
                   }
                   w= (byte)(bgreen & w);
                   S = (byte) (S|w);
                   w=1;
                   S = (byte) Integer.rotateLeft(S, x);
                   x = (byte) ((x+1)%8);
                   if (x==1) {
                       NewSecret[k] = S;
                       System.out.println(S);
                       S=0;
                       k++;
                      // System.out.println(k);
                       if(k>=60000){y=true;break;}
                       
                   }
                   w= (byte)(bblue & w);
                   S = (byte) (S|w);
                   w=1;
                   S = (byte) Integer.rotateLeft(S, x);
                   x = (byte) ((x+1)%8);
                   if (x==1) {
                       NewSecret[k] = S;
                       System.out.println(S);
                       S=0;
                       k++;
                       
                       if(k>=60000){y=true;break;}
                       
                   }
                    
                }
                if(y) break;
            }
            
            
            
            
        }
        else if (option2.isSelected()){
            w=3;
            for (int i=0; i<600;i++){
                for(int j=0;j<400;j++){
                   // System.out.println("shiiiit");
                   Integer red = pix3[i][j].getRed();
                  
                   Integer green = pix3[i][j].getGreen();
                   
                   Integer blue = pix3[i][j].getBlue();
                    byte bblue = blue.byteValue();
                    byte bred = red.byteValue();
                    byte bgreen = green.byteValue();
                  // System.out.println("bred = "+bred);
                  // System.out.println("wold= "+w);
                   w = (byte)(bred & w);
                  // System.out.println("w = "+w);
                   S = (byte) (S|w);
                   w=3;
                   S = (byte) Integer.rotateLeft(S, x*2);
                   x = (byte) ((x+1)%4);
                   if (x==1) {
                       NewSecret[k] = S;
                       System.out.println(S);
                       S=0;
                       k++;
                      // System.out.println(k);
                       if(k>=60000){y=true;break;}
                       
                   }
                   w= (byte)(bgreen & w);
                   S = (byte) (S|w);
                   w=3;
                   S = (byte) Integer.rotateLeft(S, x*2);
                   x = (byte) ((x+1)%4);
                   if (x==1) {
                       NewSecret[k] = S;
                       System.out.println(S);
                       S=0;
                       k++;
                      // System.out.println(k);
                       if(k>=60000){y=true;break;}
                       
                   }
                   w= (byte)(bblue & w);
                   S = (byte) (S|w);
                   w=3;
                   S = (byte) Integer.rotateLeft(S, x*2);
                   x = (byte) ((x+1)%4);
                   if (x==1) {
                       NewSecret[k] = S;
                       System.out.println(S);
                       S=0;
                       k++;
                       
                       if(k>=60000){y=true;break;}
                       
                   }
                    
                }
                if(y) break;
            }
            
        }
        else if (option3.isSelected()){
            w=7;
            for (int i=0; i<600;i++){
                for(int j=0;j<400;j++){
                   // System.out.println("shiiiit");
                   Integer red = pix3[i][j].getRed();
                  
                   Integer green = pix3[i][j].getGreen();
                   
                   Integer blue = pix3[i][j].getBlue();
                    byte bblue = blue.byteValue();
                    byte bred = red.byteValue();
                    byte bgreen = green.byteValue();
                  // System.out.println("bred = "+bred);
                  // System.out.println("wold= "+w);
                   w = (byte)(bred & w);
                  // System.out.println("w = "+w);
                   S = (byte) (S|w);
                   w=7;
                   S = (byte) Integer.rotateLeft(S, x*3);
                   x = (byte) ((x+1)%3);
                   if (x==1) {
                       NewSecret[k] = S;
                       System.out.println(S);
                       S=0;
                       k++;
                      // System.out.println(k);
                       if(k>=60000){y=true;break;}
                       
                   }
                   w= (byte)(bgreen & w);
                   S = (byte) (S|w);
                   w=7;
                   S = (byte) Integer.rotateLeft(S, x*3);
                   x = (byte) ((x+1)%3);
                   if (x==1) {
                       NewSecret[k] = S;
                       System.out.println(S);
                       S=0;
                       k++;
                      // System.out.println(k);
                       if(k>=60000){y=true;break;}
                       
                   }
                   w= (byte)(bblue & w);
                   S = (byte) (S|w);
                   w=7;
                   S = (byte) Integer.rotateLeft(S, x*3);
                   x = (byte) ((x+1)%3);
                   if (x==1) {
                       NewSecret[k] = S;
                       System.out.println(S);
                       S=0;
                       k++;
                       
                       if(k>=60000){y=true;break;}
                       
                   }
                    
                }
                if(y) break;
            }
        }
        BufferedImage img = ByteToImg(NewSecret);
            Graphics g = SecretPanel.getGraphics() ;
                                SecretPanel.paintComponents(g);
                                g.drawImage(img,0 , 0, SecretPanel);
                                SecretPanel.paintComponents(g);
        
    }//GEN-LAST:event_RestoreActionPerformed

    private void RSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RSaveActionPerformed
        try {
            // TODO add your handling code here:
            String m = JOptionPane.showInputDialog("Enter The name");
            File outputfile = new File(m);        
            ImageIO.write(Rimg, "bmp", outputfile);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_RSaveActionPerformed

    private void CSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CSaveActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            String m = JOptionPane.showInputDialog("Enter The name");
            File outputfile = new File(m);        
            ImageIO.write(Cimg, "bmp", outputfile);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CSaveActionPerformed

    public BufferedImage  getImage(Color [][] pix) {
        
       BufferedImage img; 
        img = new BufferedImage(600,400,BufferedImage.TYPE_INT_RGB);
        for (int i = 0; i < 600; i++) {
            for (int j = 0; j < 400; j++) {
               img.setRGB(i, j, pix[i][j].getRGB());
            }
        }
        
        return img;
    }
    /**
     * @param args the command line arguments
     */
    public BufferedImage ByteToImg(byte [] secret){
       // byte []secret = new byte[60000];
       BufferedImage img = new BufferedImage(300,200,BufferedImage.TYPE_BYTE_GRAY);
        for(int i=0; i<300;i++){
            for(int j=0;j<200;j++){
                img.setRGB(i, j, secret[j+i*200]);
            }
            
        }
        return img; 
    }
    public byte [] getByteArray(){
        byte []secret = new byte[60000];
        for(int i=0; i<300;i++){
            for(int j=0;j<200;j++){
                Integer gray = new Integer(pix2[i][j].getRed());
                secret[j+i*200] = gray.byteValue();
            }
            
        }
        return secret; 
    }
    public Color [][] getMatrixOfImage(BufferedImage img) {
        int width = img.getWidth(null);
        int height = img.getHeight(null);
        Color[][] pixels = new Color[width][height];
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                pixels[i][j] = new Color(img.getRGB(i,j));
                
                
            }
        }
        
        return pixels;
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                int a[][];
                a = new int[5][7]; 
                Scanner input = new Scanner(System.in);
              
                for(int i=0; i<5;i++) {
                    for (int j=0;j<7;j++){
                        input.nextInt(a[i][j]);
                       
                    }
                }
                int max = a[0][0]; 
                for(int i=0; i<5;i++) {
                    for (int j=0;j<7;j++){
                        if(a[i][j] > max)
                              max = a[i][j];
                       
                    }
                }
                System.out.println(max);
             
                
                
                new MainFrame().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CClear;
    private javax.swing.JButton CLoad;
    private javax.swing.JButton CSave;
    private javax.swing.JPanel CoverPanel;
    private javax.swing.JButton Hide;
    private javax.swing.JButton RClear;
    private javax.swing.JButton RLoad;
    private javax.swing.JButton RSave;
    private javax.swing.JButton Restore;
    private javax.swing.JPanel ResultPanel;
    private javax.swing.JButton SClear;
    private javax.swing.JButton SLoad;
    private javax.swing.JPanel SecretPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JRadioButton option1;
    private javax.swing.JRadioButton option2;
    private javax.swing.JRadioButton option3;
    // End of variables declaration//GEN-END:variables
    //private JFileChooser f;
    private Color [][] pix1,pix2,pix3;
    private BufferedImage Rimg,Cimg;
    private byte [] secret = new byte[60000];
}
